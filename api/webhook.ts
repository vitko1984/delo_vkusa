import type { VercelRequest, VercelResponse } from '@vercel/node';
import TelegramBot from 'node-telegram-bot-api';

//const token = import.meta.env.VITE_TELEGRAM_BOT_TOKEN, userId = import.meta.env.VITE_TELEGRAM_UID;

module.exports = async (request: VercelRequest, response: VercelResponse) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
    // —á—Ç–æ –¥–∞–ª –Ω–∞–º Botfather
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–µ –≤ –Ω–∞—à–µ–º –∫–æ–¥–µ
    //const bot = new TelegramBot(token, { polling: true });
    const bot = new TelegramBot('1479357668:AAFtfLRCDmRmDNyHAk16XXuqq18WsPu4OOc')
    const userId = '1232247854';
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ POST-–∑–∞–ø—Ä–æ—Å–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑ Telegram
    const { body } = request;
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /*if (body.message) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      // –∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { chat: { id }, text } = body.message;
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
      // –ú—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ
      const message = `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: *"${text}"*\n—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëãüèª`;
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Markdown
      await bot.sendMessage(id, message, {parse_mode: 'Markdown'});
    };*/
    if (body.title === '–ó–∞–∫–∞–∑' || body.title === '–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å' || body.title === '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "–ö–æ–Ω—Ç–∞–∫—Ç—ã"') {
      let html = '';
      if (body.envelope) { 
        let envlpCntnt = '';
        body.envelope.map(v => {
          envlpCntnt += `
            –ü—Ä–æ–¥—É–∫—Ç: ${v.productName/*.replace(`|${locals.userid}`, '')*/}\n
            –¶–µ–Ω–∞: ${v.price}\n
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${v.amount}`;
        });
        html = `*${body.title}*\n
          –ó–∞–∫–∞–∑—á–∏–∫: ${body.name}\n 
          –¢–µ–ª–µ—Ñ–æ–Ω: ${body.phone}\n 
          –≠–ª.–ø–æ—á—Ç–∞: ${body.email}\n 
          –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${body.address}\n\n 
          *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n
          ${envlpCntnt}\n\n
          *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${req_data.total}`;
      } else if (body.title === '–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å') {
        html = `*${body.title}*\n
          –ö–ª–∏–µ–Ω—Ç: ${body.name}\n
          –¢–µ–ª–µ—Ñ–æ–Ω: ${body.phone}\n
          –í–µ–º—è –∑–≤–æ–Ω–∫–∞, –ø–æ–∂–µ–ª–∞–Ω–∏—è: ${req_data.wish}`;	
      } else if (body.title === '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "–ö–æ–Ω—Ç–∞–∫—Ç—ã"') {
        html = `*${body.title}*\n
          –ö–ª–∏–µ–Ω—Ç: ${body.name}\n
          –≠–ª.–ø–æ—á—Ç–∞: ${body.email}\n
          –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ–∂–µ–ª–∞–Ω–∏–µ: ${body.wish}`;
      };
      bot.sendMessage(userId, html, {parse_mode: 'Markdown'});
    };
  } catch(error) {
    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –º—ã
    // –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å Vercel
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    console.log(error.toString());
  };
  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Telegram
  // –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è HTTP 200
  response.send('OK');
};